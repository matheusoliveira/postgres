-- create a tablespace using WITH clause
CREATE TABLESPACE testspacewith LOCATION '@testtablespace@' WITH (some_nonexistent_parameter = true); -- fail
ERROR:  unrecognized parameter "some_nonexistent_parameter"
CREATE TABLESPACE testspacewith LOCATION '@testtablespace@' WITH (random_page_cost = 3.0); -- ok
-- check to see the parameter was used
SELECT spcoptions FROM pg_tablespace WHERE spcname = 'testspacewith';
       spcoptions       
------------------------
 {random_page_cost=3.0}
(1 row)

-- drop the tablespace so we can re-use the location
DROP TABLESPACE testspacewith;
-- create a tablespace we can use
CREATE TABLESPACE testspace LOCATION '@testtablespace@';
-- try setting and resetting some properties for the new tablespace
ALTER TABLESPACE testspace SET (random_page_cost = 1.0);
ALTER TABLESPACE testspace SET (some_nonexistent_parameter = true);  -- fail
ERROR:  unrecognized parameter "some_nonexistent_parameter"
ALTER TABLESPACE testspace RESET (random_page_cost = 2.0); -- fail
ERROR:  RESET must not include values for parameters
ALTER TABLESPACE testspace RESET (random_page_cost, seq_page_cost); -- ok
-- create a schema we can use
CREATE SCHEMA testschema;
-- try a table
CREATE TABLE testschema.foo (i int) TABLESPACE testspace;
SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'foo';
 relname |  spcname  
---------+-----------
 foo     | testspace
(1 row)

INSERT INTO testschema.foo VALUES(1);
INSERT INTO testschema.foo VALUES(2);
-- tables from dynamic sources
CREATE TABLE testschema.asselect TABLESPACE testspace AS SELECT 1;
SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'asselect';
 relname  |  spcname  
----------+-----------
 asselect | testspace
(1 row)

PREPARE selectsource(int) AS SELECT $1;
CREATE TABLE testschema.asexecute TABLESPACE testspace
    AS EXECUTE selectsource(2);
SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'asexecute';
  relname  |  spcname  
-----------+-----------
 asexecute | testspace
(1 row)

-- index
CREATE INDEX foo_idx on testschema.foo(i) TABLESPACE testspace;
SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'foo_idx';
 relname |  spcname  
---------+-----------
 foo_idx | testspace
(1 row)

-- let's try moving a table from one place to another
CREATE TABLE testschema.atable AS VALUES (1), (2);
CREATE UNIQUE INDEX anindex ON testschema.atable(column1);
ALTER TABLE testschema.atable SET TABLESPACE testspace;
ALTER INDEX testschema.anindex SET TABLESPACE testspace;
INSERT INTO testschema.atable VALUES(3);	-- ok
INSERT INTO testschema.atable VALUES(1);	-- fail (checks index)
ERROR:  duplicate key value violates unique constraint "anindex"
DETAIL:  Key (column1)=(1) already exists.
SELECT COUNT(*) FROM testschema.atable;		-- checks heap
 count 
-------
     3
(1 row)

-- Will fail with bad path
CREATE TABLESPACE badspace LOCATION '/no/such/location';
ERROR:  directory "/no/such/location" does not exist
-- No such tablespace
CREATE TABLE bar (i int) TABLESPACE nosuchspace;
ERROR:  tablespace "nosuchspace" does not exist
-- Fail, not empty
DROP TABLESPACE testspace;
ERROR:  tablespace "testspace" is not empty
CREATE ROLE tablespace_testuser1 login;
CREATE ROLE tablespace_testuser2 login;
ALTER TABLESPACE testspace OWNER TO tablespace_testuser1;
SET SESSION ROLE tablespace_testuser2;
CREATE TABLE tablespace_table (i int) TABLESPACE testspace; -- fail
ERROR:  permission denied for tablespace testspace
\c -
ALTER TABLESPACE testspace RENAME TO testspace_renamed;
ALTER TABLESPACE testspace_renamed MOVE ALL TO pg_default;
-- Should show notice that nothing was done
ALTER TABLESPACE testspace_renamed MOVE ALL TO pg_default;
NOTICE:  no matching relations in tablespace "testspace_renamed" found
-- Try changing only_temp_files
ALTER TABLESPACE testspace_renamed SET (only_temp_files = true); --fail
ERROR:  cannot alter a tablespace to become temporary
ALTER TABLESPACE testspace_renamed SET (only_temp_files = on); --fail
ERROR:  cannot alter a tablespace to become temporary
SELECT spcoptions FROM pg_tablespace WHERE spcname = 'testspace_renamed';
 spcoptions 
------------
 
(1 row)

ALTER TABLESPACE testspace_renamed SET (only_temp_files = false); --ok, already non-temporary, just explicit set
SELECT spcoptions FROM pg_tablespace WHERE spcname = 'testspace_renamed';
       spcoptions        
-------------------------
 {only_temp_files=false}
(1 row)

ALTER TABLESPACE testspace_renamed SET (only_temp_files = off); --ok, already non-temporary, just explicit set
SELECT spcoptions FROM pg_tablespace WHERE spcname = 'testspace_renamed';
      spcoptions       
-----------------------
 {only_temp_files=off}
(1 row)

ALTER TABLESPACE testspace_renamed RESET (only_temp_files); --ok
-- Should succeed
DROP TABLESPACE testspace_renamed;
-- Now, let's create temporary tablespace
CREATE TABLESPACE testspace LOCATION '@testtablespace@' WITH (only_temp_files = true); -- ok
CREATE TABLE testschema.nontemp(a int) TABLESPACE testspace; -- fail
ERROR:  this tablespace only allows temporary files
CREATE TABLE testschema.nontemp(a int); -- ok
ALTER TABLE testschema.nontemp SET TABLESPACE testspace; -- fail
ERROR:  this tablespace only allows temporary files
CREATE INDEX nontemp_idx ON testschema.nontemp(a) TABLESPACE testspace; -- fail
ERROR:  this tablespace only allows temporary files
CREATE INDEX nontemp_idx ON testschema.nontemp(a); -- ok
ALTER INDEX testschema.nontemp_idx SET TABLESPACE testspace; -- fail
ERROR:  this tablespace only allows temporary files
-- Explicit created (on CREATE and ALTER)
CREATE TEMP TABLE temptbl(a int) TABLESPACE testspace;
CREATE INDEX temptbl_idx ON temptbl(a);
CREATE TEMP TABLE temptbl2(a int);
CREATE INDEX temptbl2_idx ON temptbl2(a);
ALTER TABLE temptbl2 SET TABLESPACE testspace;
ALTER INDEX temptbl2_idx SET TABLESPACE testspace;
CREATE INDEX temptbl_idx ON temptbl (a);
ERROR:  relation "temptbl_idx" already exists
SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relnamespace = pg_my_temp_schema() AND c.relname IN ('temptbl', 'temptbl_idx', 'temptbl2', 'temptbl2_idx');
   relname    |  spcname  
--------------+-----------
 temptbl      | testspace
 temptbl2_idx | testspace
 temptbl2     | testspace
(3 rows)

DROP TABLE temptbl;
DROP TABLE temptbl2;
-- Use temp_tablespaces
SET temp_tablespaces TO 'testspace';
CREATE TEMP TABLE temptbl(a int);
CREATE INDEX temptbl_idx ON temptbl (a);
SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relnamespace = pg_my_temp_schema() AND c.relname IN ('temptbl', 'temptbl_idx');
   relname   |  spcname  
-------------+-----------
 temptbl     | testspace
 temptbl_idx | testspace
(2 rows)

-- Use this tablespace in a sort operation, and check if any files on pgsql_tmp has been used
SET work_mem TO '1MB';
WITH o AS (SELECT i, md5(random()::text) FROM generate_series(1, 100000) i ORDER BY md5) SELECT count(*) > 0 FROM (SELECT pg_ls_dir('pg_tblspc/' || oid || '/' || pg_ls_dir('pg_tblspc/' || oid || '/') || '/pgsql_tmp/') FROM pg_tablespace, (SELECT count(*) FROM o) t1 WHERE spcname = 'testspace') t2;
 ?column? 
----------
 t
(1 row)

-- Should succeed
DROP SCHEMA testschema CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table testschema.foo
drop cascades to table testschema.asselect
drop cascades to table testschema.asexecute
drop cascades to table testschema.atable
drop cascades to table testschema.nontemp
DROP ROLE tablespace_testuser1;
DROP ROLE tablespace_testuser2;
